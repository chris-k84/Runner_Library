<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="ObjectRunner" Id="{4adb75ec-914c-46a2-96a4-b49d6ed1e005}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK ObjectRunner EXTENDS CyclicBase IMPLEMENTS I_ObjectRunner
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	CyclicModules : ARRAY[0..MaxRegisteredModules] OF ICyclic;
	ModuleCount : INT := 0;
	InitModuleCount : INT := 0;
	InitialiseModules : ARRAY[0..MaxRegisteredModules] OF I_Initialise;
	i: INT;
	InitialisationCount : INT := 0;
END_VAR
VAR CONSTANT
	MaxRegisteredModules : INT := 99;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="AddComponent" Id="{5f816535-6603-4c30-b42c-afe250745821}">
      <Declaration><![CDATA[METHOD AddComponent : HRESULT
VAR_INPUT
	CyclicModule : ICyclic;
END_VAR
VAR
	InitInterface : I_Initialise;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ModuleCount < (MaxRegisteredModules + 1) THEN
	CyclicModules[ModuleCount] := CyclicModule;
	IF __QUERYINTERFACE(CyclicModule,InitInterface) THEN
		InitialiseModules[InitModuleCount] := InitInterface;
		InitModuleCount := InitModuleCount + 1;
	END_IF
	ModuleCount := ModuleCount + 1;
	AddComponent := 2;
ELSE
	AddComponent := S_FALSE;
END_IF

	]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clear" Id="{801399c7-4ed5-4baa-bb84-25ca1ab9b024}">
      <Declaration><![CDATA[METHOD Clear : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO ModuleCount DO
	CyclicModules[i] := 0;
	InitialiseModules[i] := 0;
END_FOR
ModuleCount := 0;
InitModuleCount := 0;
Clear := 2;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Cycle" Id="{07b170dc-1426-48b0-b328-82870c7027f5}">
      <Declaration><![CDATA[METHOD PUBLIC  Cycle : HRESULT
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO ModuleCount DO
	IF CyclicModules[i] <> 0 THEN
		CyclicModules[i].Cycle();
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetModuleCount" Id="{ce16b2d3-0e8a-4df6-aa9c-1c1b403838ba}">
      <Declaration><![CDATA[METHOD GetModuleCount : int
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetModuleCount := ModuleCount;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialise" Id="{498dbf2f-31fd-468f-af2a-ef254d08806c}">
      <Declaration><![CDATA[METHOD Initialise : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF InitialisationCount < InitModuleCount THEN
	IF InitialiseModules[InitialisationCount] <> 0 THEN
		IF InitialiseModules[InitialisationCount].Initialise() = 2 THEN
			InitialisationCount := InitialisationCount + 1;
		END_IF
	ELSE
		InitialisationCount := InitialisationCount + 1;
	END_IF
ELSE
	Initialise := 2;
	InitialisationCount := 0;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveModule" Id="{dfa8fa7b-42f3-4591-8ff7-fdf50b44b36a}">
      <Declaration><![CDATA[METHOD RemoveModule : HRESULT
VAR_INPUT
	CyclicModule : ICyclic;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ModuleCount > 0 THEN
	RemoveModule := E_FAIL;
	FOR i := 0 TO ModuleCount DO 
		IF CyclicModules[i] = CyclicModule THEN
			CyclicModules[i] := 0;
			IF InitialiseModules[i] <> 0 THEN
				InitialiseModules[i] := 0;
				InitModuleCount := InitModuleCount - 1;
			END_IF
			ModuleCount := ModuleCount - 1;
			RemoveModule := 2;
		END_IF
	END_FOR
ELSE
	RemoveModule := S_FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>